# source: https://eu1.prisma.sh/lovebirdcom/lovebird/lovebird
# timestamp: Thu Jul 11 2019 12:48:29 GMT+0700 (Indochina Time)

type AggregateAuthPayload {
  count: Int!
}

type AggregateBerita {
  count: Int!
}

type AggregateComment {
  count: Int!
}

type AggregateDiskusi {
  count: Int!
}

type AggregateFile {
  count: Int!
}

type AggregateLomba {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AuthPayload implements Node {
  id: ID!
  token: String
  user: User
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type AuthPayloadConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AuthPayloadEdge]!
  aggregate: AggregateAuthPayload!
}

input AuthPayloadCreateInput {
  id: ID
  token: String
  user: UserCreateOneInput
}

"""An edge in a connection."""
type AuthPayloadEdge {
  """The item at the end of the edge."""
  node: AuthPayload!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AuthPayloadOrderByInput {
  id_ASC
  id_DESC
  token_ASC
  token_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AuthPayloadPreviousValues {
  id: ID!
  token: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

type AuthPayloadSubscriptionPayload {
  mutation: MutationType!
  node: AuthPayload
  updatedFields: [String!]
  previousValues: AuthPayloadPreviousValues
}

input AuthPayloadSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AuthPayloadSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AuthPayloadSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AuthPayloadSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AuthPayloadWhereInput
}

input AuthPayloadUpdateInput {
  token: String
  user: UserUpdateOneInput
}

input AuthPayloadUpdateManyMutationInput {
  token: String
}

input AuthPayloadWhereInput {
  """Logical AND on all given filters."""
  AND: [AuthPayloadWhereInput!]

  """Logical OR on all given filters."""
  OR: [AuthPayloadWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AuthPayloadWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  token: String

  """All values that are not equal to given value."""
  token_not: String

  """All values that are contained in given list."""
  token_in: [String!]

  """All values that are not contained in given list."""
  token_not_in: [String!]

  """All values less than the given value."""
  token_lt: String

  """All values less than or equal the given value."""
  token_lte: String

  """All values greater than the given value."""
  token_gt: String

  """All values greater than or equal the given value."""
  token_gte: String

  """All values containing the given string."""
  token_contains: String

  """All values not containing the given string."""
  token_not_contains: String

  """All values starting with the given string."""
  token_starts_with: String

  """All values not starting with the given string."""
  token_not_starts_with: String

  """All values ending with the given string."""
  token_ends_with: String

  """All values not ending with the given string."""
  token_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  user: UserWhereInput
}

input AuthPayloadWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Berita implements Node {
  id: ID!
  createdAt: DateTime!
  headline: String!
  berita: String!
}

"""A connection to a list of items."""
type BeritaConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BeritaEdge]!
  aggregate: AggregateBerita!
}

input BeritaCreateInput {
  id: ID
  headline: String!
  berita: String!
}

"""An edge in a connection."""
type BeritaEdge {
  """The item at the end of the edge."""
  node: Berita!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BeritaOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  headline_ASC
  headline_DESC
  berita_ASC
  berita_DESC
}

type BeritaPreviousValues {
  id: ID!
  createdAt: DateTime!
  headline: String!
  berita: String!
}

type BeritaSubscriptionPayload {
  mutation: MutationType!
  node: Berita
  updatedFields: [String!]
  previousValues: BeritaPreviousValues
}

input BeritaSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BeritaSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BeritaSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BeritaSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BeritaWhereInput
}

input BeritaUpdateInput {
  headline: String
  berita: String
}

input BeritaUpdateManyMutationInput {
  headline: String
  berita: String
}

input BeritaWhereInput {
  """Logical AND on all given filters."""
  AND: [BeritaWhereInput!]

  """Logical OR on all given filters."""
  OR: [BeritaWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BeritaWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  headline: String

  """All values that are not equal to given value."""
  headline_not: String

  """All values that are contained in given list."""
  headline_in: [String!]

  """All values that are not contained in given list."""
  headline_not_in: [String!]

  """All values less than the given value."""
  headline_lt: String

  """All values less than or equal the given value."""
  headline_lte: String

  """All values greater than the given value."""
  headline_gt: String

  """All values greater than or equal the given value."""
  headline_gte: String

  """All values containing the given string."""
  headline_contains: String

  """All values not containing the given string."""
  headline_not_contains: String

  """All values starting with the given string."""
  headline_starts_with: String

  """All values not starting with the given string."""
  headline_not_starts_with: String

  """All values ending with the given string."""
  headline_ends_with: String

  """All values not ending with the given string."""
  headline_not_ends_with: String
  berita: String

  """All values that are not equal to given value."""
  berita_not: String

  """All values that are contained in given list."""
  berita_in: [String!]

  """All values that are not contained in given list."""
  berita_not_in: [String!]

  """All values less than the given value."""
  berita_lt: String

  """All values less than or equal the given value."""
  berita_lte: String

  """All values greater than the given value."""
  berita_gt: String

  """All values greater than or equal the given value."""
  berita_gte: String

  """All values containing the given string."""
  berita_contains: String

  """All values not containing the given string."""
  berita_not_contains: String

  """All values starting with the given string."""
  berita_starts_with: String

  """All values not starting with the given string."""
  berita_not_starts_with: String

  """All values ending with the given string."""
  berita_ends_with: String

  """All values not ending with the given string."""
  berita_not_ends_with: String
}

input BeritaWhereUniqueInput {
  id: ID
}

type Comment implements Node {
  id: ID!
  createdAt: DateTime!
  text: String!
  writtenBy: User!
}

"""A connection to a list of items."""
type CommentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  id: ID
  text: String!
  writtenBy: UserCreateOneInput!
}

"""An edge in a connection."""
type CommentEdge {
  """The item at the end of the edge."""
  node: Comment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  text_ASC
  text_DESC
}

type CommentPreviousValues {
  id: ID!
  createdAt: DateTime!
  text: String!
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
}

input CommentUpdateInput {
  text: String
  writtenBy: UserUpdateOneRequiredInput
}

input CommentUpdateManyMutationInput {
  text: String
}

input CommentWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  writtenBy: UserWhereInput
}

input CommentWhereUniqueInput {
  id: ID
}

scalar DateTime

type Diskusi implements Node {
  id: ID!
  createdAt: DateTime!
  judul: String!
  isi: String!
}

"""A connection to a list of items."""
type DiskusiConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DiskusiEdge]!
  aggregate: AggregateDiskusi!
}

input DiskusiCreateInput {
  id: ID
  judul: String!
  isi: String!
}

"""An edge in a connection."""
type DiskusiEdge {
  """The item at the end of the edge."""
  node: Diskusi!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DiskusiOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  judul_ASC
  judul_DESC
  isi_ASC
  isi_DESC
}

type DiskusiPreviousValues {
  id: ID!
  createdAt: DateTime!
  judul: String!
  isi: String!
}

type DiskusiSubscriptionPayload {
  mutation: MutationType!
  node: Diskusi
  updatedFields: [String!]
  previousValues: DiskusiPreviousValues
}

input DiskusiSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DiskusiSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DiskusiSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DiskusiSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DiskusiWhereInput
}

input DiskusiUpdateInput {
  judul: String
  isi: String
}

input DiskusiUpdateManyMutationInput {
  judul: String
  isi: String
}

input DiskusiWhereInput {
  """Logical AND on all given filters."""
  AND: [DiskusiWhereInput!]

  """Logical OR on all given filters."""
  OR: [DiskusiWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DiskusiWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  judul: String

  """All values that are not equal to given value."""
  judul_not: String

  """All values that are contained in given list."""
  judul_in: [String!]

  """All values that are not contained in given list."""
  judul_not_in: [String!]

  """All values less than the given value."""
  judul_lt: String

  """All values less than or equal the given value."""
  judul_lte: String

  """All values greater than the given value."""
  judul_gt: String

  """All values greater than or equal the given value."""
  judul_gte: String

  """All values containing the given string."""
  judul_contains: String

  """All values not containing the given string."""
  judul_not_contains: String

  """All values starting with the given string."""
  judul_starts_with: String

  """All values not starting with the given string."""
  judul_not_starts_with: String

  """All values ending with the given string."""
  judul_ends_with: String

  """All values not ending with the given string."""
  judul_not_ends_with: String
  isi: String

  """All values that are not equal to given value."""
  isi_not: String

  """All values that are contained in given list."""
  isi_in: [String!]

  """All values that are not contained in given list."""
  isi_not_in: [String!]

  """All values less than the given value."""
  isi_lt: String

  """All values less than or equal the given value."""
  isi_lte: String

  """All values greater than the given value."""
  isi_gt: String

  """All values greater than or equal the given value."""
  isi_gte: String

  """All values containing the given string."""
  isi_contains: String

  """All values not containing the given string."""
  isi_not_contains: String

  """All values starting with the given string."""
  isi_starts_with: String

  """All values not starting with the given string."""
  isi_not_starts_with: String

  """All values ending with the given string."""
  isi_ends_with: String

  """All values not ending with the given string."""
  isi_not_ends_with: String
}

input DiskusiWhereUniqueInput {
  id: ID
}

type File implements Node {
  id: ID!
  createdAt: DateTime!
  file: String!
  writtenBy: User!
}

"""A connection to a list of items."""
type FileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  id: ID
  file: String!
  writtenBy: UserCreateOneInput!
}

"""An edge in a connection."""
type FileEdge {
  """The item at the end of the edge."""
  node: File!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FileOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  file_ASC
  file_DESC
}

type FilePreviousValues {
  id: ID!
  createdAt: DateTime!
  file: String!
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FileSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FileWhereInput
}

input FileUpdateInput {
  file: String
  writtenBy: UserUpdateOneRequiredInput
}

input FileUpdateManyMutationInput {
  file: String
}

input FileWhereInput {
  """Logical AND on all given filters."""
  AND: [FileWhereInput!]

  """Logical OR on all given filters."""
  OR: [FileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  file: String

  """All values that are not equal to given value."""
  file_not: String

  """All values that are contained in given list."""
  file_in: [String!]

  """All values that are not contained in given list."""
  file_not_in: [String!]

  """All values less than the given value."""
  file_lt: String

  """All values less than or equal the given value."""
  file_lte: String

  """All values greater than the given value."""
  file_gt: String

  """All values greater than or equal the given value."""
  file_gte: String

  """All values containing the given string."""
  file_contains: String

  """All values not containing the given string."""
  file_not_contains: String

  """All values starting with the given string."""
  file_starts_with: String

  """All values not starting with the given string."""
  file_not_starts_with: String

  """All values ending with the given string."""
  file_ends_with: String

  """All values not ending with the given string."""
  file_not_ends_with: String
  writtenBy: UserWhereInput
}

input FileWhereUniqueInput {
  id: ID
}

type Lomba implements Node {
  id: ID!
  createdAt: DateTime!
  lomba: String!
  ketlomba: String!
}

"""A connection to a list of items."""
type LombaConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LombaEdge]!
  aggregate: AggregateLomba!
}

input LombaCreateInput {
  id: ID
  lomba: String!
  ketlomba: String!
}

"""An edge in a connection."""
type LombaEdge {
  """The item at the end of the edge."""
  node: Lomba!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LombaOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  lomba_ASC
  lomba_DESC
  ketlomba_ASC
  ketlomba_DESC
}

type LombaPreviousValues {
  id: ID!
  createdAt: DateTime!
  lomba: String!
  ketlomba: String!
}

type LombaSubscriptionPayload {
  mutation: MutationType!
  node: Lomba
  updatedFields: [String!]
  previousValues: LombaPreviousValues
}

input LombaSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LombaSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LombaSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LombaSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LombaWhereInput
}

input LombaUpdateInput {
  lomba: String
  ketlomba: String
}

input LombaUpdateManyMutationInput {
  lomba: String
  ketlomba: String
}

input LombaWhereInput {
  """Logical AND on all given filters."""
  AND: [LombaWhereInput!]

  """Logical OR on all given filters."""
  OR: [LombaWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LombaWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  lomba: String

  """All values that are not equal to given value."""
  lomba_not: String

  """All values that are contained in given list."""
  lomba_in: [String!]

  """All values that are not contained in given list."""
  lomba_not_in: [String!]

  """All values less than the given value."""
  lomba_lt: String

  """All values less than or equal the given value."""
  lomba_lte: String

  """All values greater than the given value."""
  lomba_gt: String

  """All values greater than or equal the given value."""
  lomba_gte: String

  """All values containing the given string."""
  lomba_contains: String

  """All values not containing the given string."""
  lomba_not_contains: String

  """All values starting with the given string."""
  lomba_starts_with: String

  """All values not starting with the given string."""
  lomba_not_starts_with: String

  """All values ending with the given string."""
  lomba_ends_with: String

  """All values not ending with the given string."""
  lomba_not_ends_with: String
  ketlomba: String

  """All values that are not equal to given value."""
  ketlomba_not: String

  """All values that are contained in given list."""
  ketlomba_in: [String!]

  """All values that are not contained in given list."""
  ketlomba_not_in: [String!]

  """All values less than the given value."""
  ketlomba_lt: String

  """All values less than or equal the given value."""
  ketlomba_lte: String

  """All values greater than the given value."""
  ketlomba_gt: String

  """All values greater than or equal the given value."""
  ketlomba_gte: String

  """All values containing the given string."""
  ketlomba_contains: String

  """All values not containing the given string."""
  ketlomba_not_contains: String

  """All values starting with the given string."""
  ketlomba_starts_with: String

  """All values not starting with the given string."""
  ketlomba_not_starts_with: String

  """All values ending with the given string."""
  ketlomba_ends_with: String

  """All values not ending with the given string."""
  ketlomba_not_ends_with: String
}

input LombaWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createComment(data: CommentCreateInput!): Comment!
  createDiskusi(data: DiskusiCreateInput!): Diskusi!
  createBerita(data: BeritaCreateInput!): Berita!
  createLomba(data: LombaCreateInput!): Lomba!
  createFile(data: FileCreateInput!): File!
  createPost(data: PostCreateInput!): Post!
  createAuthPayload(data: AuthPayloadCreateInput!): AuthPayload!
  createUser(data: UserCreateInput!): User!
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateDiskusi(data: DiskusiUpdateInput!, where: DiskusiWhereUniqueInput!): Diskusi
  updateBerita(data: BeritaUpdateInput!, where: BeritaWhereUniqueInput!): Berita
  updateLomba(data: LombaUpdateInput!, where: LombaWhereUniqueInput!): Lomba
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateAuthPayload(data: AuthPayloadUpdateInput!, where: AuthPayloadWhereUniqueInput!): AuthPayload
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteDiskusi(where: DiskusiWhereUniqueInput!): Diskusi
  deleteBerita(where: BeritaWhereUniqueInput!): Berita
  deleteLomba(where: LombaWhereUniqueInput!): Lomba
  deleteFile(where: FileWhereUniqueInput!): File
  deletePost(where: PostWhereUniqueInput!): Post
  deleteAuthPayload(where: AuthPayloadWhereUniqueInput!): AuthPayload
  deleteUser(where: UserWhereUniqueInput!): User
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  upsertDiskusi(where: DiskusiWhereUniqueInput!, create: DiskusiCreateInput!, update: DiskusiUpdateInput!): Diskusi!
  upsertBerita(where: BeritaWhereUniqueInput!, create: BeritaCreateInput!, update: BeritaUpdateInput!): Berita!
  upsertLomba(where: LombaWhereUniqueInput!, create: LombaCreateInput!, update: LombaUpdateInput!): Lomba!
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertAuthPayload(where: AuthPayloadWhereUniqueInput!, create: AuthPayloadCreateInput!, update: AuthPayloadUpdateInput!): AuthPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  updateManyDiskusis(data: DiskusiUpdateManyMutationInput!, where: DiskusiWhereInput): BatchPayload!
  updateManyBeritas(data: BeritaUpdateManyMutationInput!, where: BeritaWhereInput): BatchPayload!
  updateManyLombas(data: LombaUpdateManyMutationInput!, where: LombaWhereInput): BatchPayload!
  updateManyFiles(data: FileUpdateManyMutationInput!, where: FileWhereInput): BatchPayload!
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  updateManyAuthPayloads(data: AuthPayloadUpdateManyMutationInput!, where: AuthPayloadWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  deleteManyDiskusis(where: DiskusiWhereInput): BatchPayload!
  deleteManyBeritas(where: BeritaWhereInput): BatchPayload!
  deleteManyLombas(where: LombaWhereInput): BatchPayload!
  deleteManyFiles(where: FileWhereInput): BatchPayload!
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  deleteManyAuthPayloads(where: AuthPayloadWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Post implements Node {
  id: ID!
  title: String!
  content: String!
  published: Boolean!
}

"""A connection to a list of items."""
type PostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  title: String!
  content: String!
  published: Boolean!
}

"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge."""
  node: Post!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  content_ASC
  content_DESC
  published_ASC
  published_DESC
}

type PostPreviousValues {
  id: ID!
  title: String!
  content: String!
  published: Boolean!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PostSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  title: String
  content: String
  published: Boolean
}

input PostUpdateManyMutationInput {
  title: String
  content: String
  published: Boolean
}

input PostWhereInput {
  """Logical AND on all given filters."""
  AND: [PostWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String!]

  """All values that are not contained in given list."""
  content_not_in: [String!]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
  published: Boolean

  """All values that are not equal to given value."""
  published_not: Boolean
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  diskusis(where: DiskusiWhereInput, orderBy: DiskusiOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Diskusi]!
  beritas(where: BeritaWhereInput, orderBy: BeritaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Berita]!
  lombas(where: LombaWhereInput, orderBy: LombaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lomba]!
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  authPayloads(where: AuthPayloadWhereInput, orderBy: AuthPayloadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AuthPayload]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  comment(where: CommentWhereUniqueInput!): Comment
  diskusi(where: DiskusiWhereUniqueInput!): Diskusi
  berita(where: BeritaWhereUniqueInput!): Berita
  lomba(where: LombaWhereUniqueInput!): Lomba
  file(where: FileWhereUniqueInput!): File
  post(where: PostWhereUniqueInput!): Post
  authPayload(where: AuthPayloadWhereUniqueInput!): AuthPayload
  user(where: UserWhereUniqueInput!): User
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  diskusisConnection(where: DiskusiWhereInput, orderBy: DiskusiOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DiskusiConnection!
  beritasConnection(where: BeritaWhereInput, orderBy: BeritaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BeritaConnection!
  lombasConnection(where: LombaWhereInput, orderBy: LombaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LombaConnection!
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  authPayloadsConnection(where: AuthPayloadWhereInput, orderBy: AuthPayloadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AuthPayloadConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  diskusi(where: DiskusiSubscriptionWhereInput): DiskusiSubscriptionPayload
  berita(where: BeritaSubscriptionWhereInput): BeritaSubscriptionPayload
  lomba(where: LombaSubscriptionWhereInput): LombaSubscriptionPayload
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  authPayload(where: AuthPayloadSubscriptionWhereInput): AuthPayloadSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User implements Node {
  id: ID!
  nama: String!
  alamat: String!
  email: String!
  nohp: String!
  biografi: String!
  password: String!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  nama: String!
  alamat: String!
  email: String!
  nohp: String!
  biografi: String!
  password: String!
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  nama_ASC
  nama_DESC
  alamat_ASC
  alamat_DESC
  email_ASC
  email_DESC
  nohp_ASC
  nohp_DESC
  biografi_ASC
  biografi_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  nama: String!
  alamat: String!
  email: String!
  nohp: String!
  biografi: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  nama: String
  alamat: String
  email: String
  nohp: String
  biografi: String
  password: String
}

input UserUpdateInput {
  nama: String
  alamat: String
  email: String
  nohp: String
  biografi: String
  password: String
}

input UserUpdateManyMutationInput {
  nama: String
  alamat: String
  email: String
  nohp: String
  biografi: String
  password: String
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  nama: String

  """All values that are not equal to given value."""
  nama_not: String

  """All values that are contained in given list."""
  nama_in: [String!]

  """All values that are not contained in given list."""
  nama_not_in: [String!]

  """All values less than the given value."""
  nama_lt: String

  """All values less than or equal the given value."""
  nama_lte: String

  """All values greater than the given value."""
  nama_gt: String

  """All values greater than or equal the given value."""
  nama_gte: String

  """All values containing the given string."""
  nama_contains: String

  """All values not containing the given string."""
  nama_not_contains: String

  """All values starting with the given string."""
  nama_starts_with: String

  """All values not starting with the given string."""
  nama_not_starts_with: String

  """All values ending with the given string."""
  nama_ends_with: String

  """All values not ending with the given string."""
  nama_not_ends_with: String
  alamat: String

  """All values that are not equal to given value."""
  alamat_not: String

  """All values that are contained in given list."""
  alamat_in: [String!]

  """All values that are not contained in given list."""
  alamat_not_in: [String!]

  """All values less than the given value."""
  alamat_lt: String

  """All values less than or equal the given value."""
  alamat_lte: String

  """All values greater than the given value."""
  alamat_gt: String

  """All values greater than or equal the given value."""
  alamat_gte: String

  """All values containing the given string."""
  alamat_contains: String

  """All values not containing the given string."""
  alamat_not_contains: String

  """All values starting with the given string."""
  alamat_starts_with: String

  """All values not starting with the given string."""
  alamat_not_starts_with: String

  """All values ending with the given string."""
  alamat_ends_with: String

  """All values not ending with the given string."""
  alamat_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  nohp: String

  """All values that are not equal to given value."""
  nohp_not: String

  """All values that are contained in given list."""
  nohp_in: [String!]

  """All values that are not contained in given list."""
  nohp_not_in: [String!]

  """All values less than the given value."""
  nohp_lt: String

  """All values less than or equal the given value."""
  nohp_lte: String

  """All values greater than the given value."""
  nohp_gt: String

  """All values greater than or equal the given value."""
  nohp_gte: String

  """All values containing the given string."""
  nohp_contains: String

  """All values not containing the given string."""
  nohp_not_contains: String

  """All values starting with the given string."""
  nohp_starts_with: String

  """All values not starting with the given string."""
  nohp_not_starts_with: String

  """All values ending with the given string."""
  nohp_ends_with: String

  """All values not ending with the given string."""
  nohp_not_ends_with: String
  biografi: String

  """All values that are not equal to given value."""
  biografi_not: String

  """All values that are contained in given list."""
  biografi_in: [String!]

  """All values that are not contained in given list."""
  biografi_not_in: [String!]

  """All values less than the given value."""
  biografi_lt: String

  """All values less than or equal the given value."""
  biografi_lte: String

  """All values greater than the given value."""
  biografi_gt: String

  """All values greater than or equal the given value."""
  biografi_gte: String

  """All values containing the given string."""
  biografi_contains: String

  """All values not containing the given string."""
  biografi_not_contains: String

  """All values starting with the given string."""
  biografi_starts_with: String

  """All values not starting with the given string."""
  biografi_not_starts_with: String

  """All values ending with the given string."""
  biografi_ends_with: String

  """All values not ending with the given string."""
  biografi_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
}

input UserWhereUniqueInput {
  id: ID
}
